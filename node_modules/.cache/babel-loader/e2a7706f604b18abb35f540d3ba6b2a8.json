{"remainingRequest":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/babel-loader/lib/index.js!/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/src/components/GottaWatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/src/components/GottaWatch.vue","mtime":1576534749254},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vZmlyZWJhc2UnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGdvdHRhV2F0Y2hMaXN0OiBbXSwKICAgICAgZW1wdHk6IGZhbHNlLAogICAgICBsb2FkaW5nOiB0cnVlLAogICAgICB1c2VyOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLnVzZXIKICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5mZXRjaEdvdHRhV2F0Y2hMaXN0KCk7CiAgICB0aGlzLmVtcHR5ID0gdGhpcy5nb3R0YVdhdGNoTGlzdC5sZW5ndGggPT09IDA7CiAgfSwKICBjb21wdXRlZDoge30sCiAgbWV0aG9kczogewogICAgc2luZ2xlTW92aWU6IGZ1bmN0aW9uIHNpbmdsZU1vdmllKGlkKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvbW92aWUvJyArIGlkKTsKICAgIH0sCiAgICBwb3N0ZXJJbWFnZTogZnVuY3Rpb24gcG9zdGVySW1hZ2UoaXRlbSkgewogICAgICB2YXIgYmFzZUltZ1VybCA9ICdodHRwczovL2ltYWdlLnRtZGIub3JnL3QvcC8nOwogICAgICByZXR1cm4gYmFzZUltZ1VybC5jb25jYXQoJ3cxNTQnLCBpdGVtLnBvc3Rlcl9wYXRoKTsKICAgIH0sCiAgICBmZXRjaEdvdHRhV2F0Y2hMaXN0OiBmdW5jdGlvbiBmZXRjaEdvdHRhV2F0Y2hMaXN0KCkgewogICAgICB2YXIgc2VsZjsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBmZXRjaEdvdHRhV2F0Y2hMaXN0JChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICB0aGlzLmdvdHRhV2F0Y2hMaXN0ID0gW107CiAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7IC8vIGxvYWQgbGlzdCBmcm9tIGRhdGFiYXNlIHRvIGxvY2FsCgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZGIuY29sbGVjdGlvbigncG9wY29yblVzZXJzJykuZG9jKHRoaXMudXNlci51aWQpLmNvbGxlY3Rpb24oJ2dvdHRhV2F0Y2hMaXN0Jykub3JkZXJCeSgnZGF0ZXRpbWUnKS5nZXQoKS50aGVuKGZ1bmN0aW9uIChxdWVyeVNuYXBzaG90KSB7CiAgICAgICAgICAgICAgICBxdWVyeVNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24gKGRvYykgewogICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZQogICAgICAgICAgICAgICAgICBzZWxmLmdvdHRhV2F0Y2hMaXN0LnB1c2goZG9jLmRhdGEoKSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZ2V0dGluZyBkb2N1bWVudHM6ICcsIGVycm9yKTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdvdHRhV2F0Y2hMaXN0LmdldCgwKSk7CiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["GottaWatch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,SAAA,EAAA,QAAA,aAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA,IAHA;AAIA,MAAA,IAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AAJA,KAAA;AAMA,GARA;AAUA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,mBAAA;AACA,SAAA,KAAA,GAAA,KAAA,cAAA,CAAA,MAAA,KAAA,CAAA;AACA,GAbA;AAeA,EAAA,QAAA,EAAA,EAfA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,EADA,EACA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,YAAA,EAAA;AACA,KAHA;AAKA,IAAA,WALA,uBAKA,IALA,EAKA;AACA,UAAA,UAAA,GAAA,6BAAA;AACA,aAAA,UAAA,CAAA,MAAA,CAAA,MAAA,EAAA,IAAA,CAAA,WAAA,CAAA;AACA,KARA;AAUA,IAAA,mBAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,mBAAA,cAAA,GAAA,EAAA;AACA,cAAA,IAZA,GAYA,IAZA,EAaA;;AAbA;AAAA,8CAcA,EAAA,CACA,UADA,CACA,cADA,EAEA,GAFA,CAEA,KAAA,IAAA,CAAA,GAFA,EAGA,UAHA,CAGA,gBAHA,EAIA,OAJA,CAIA,UAJA,EAKA,GALA,GAMA,IANA,CAMA,UAAA,aAAA,EAAA;AACA,gBAAA,aAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA;AACA,kBAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,EAAA;AACA,iBAHA;AAIA,eAXA,EAYA,KAZA,CAYA,UAAA,KAAA,EAAA;AACA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,2BAAA,EAAA,KAAA;AACA,eAfA,CAdA;;AAAA;AA8BA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,KAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,mBAAA,OAAA,GAAA,KAAA;;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA,CAAA","sourcesContent":["<template>\n    <v-container v-if=\"loading\">\n        <div class=\"text-xs-center\">\n            <v-progress-circular\n                indeterminate\n                :size=\"150\"\n                :width=\"8\"\n                color=\"green\"\n            >\n            </v-progress-circular>\n        </div>\n    </v-container>\n\n    <v-container v-else-if=\"empty\">\n        <div class=\"text-xs-center\">\n            <h2>No Movie in GottaWatch list</h2>\n        </div>\n    </v-container>\n\n    <v-container v-else grid-list-xl>\n        <v-layout wrap>\n            <v-flex\n                xs4\n                v-for=\"(item, index) in gottaWatchList\"\n                :key=\"index\"\n                mb-2\n            >\n                <v-card>\n                    <v-img\n                        :src=\"posterImage(item.movie)\"\n                        aspect-ratio=\"1\"\n                        :alt=\"item.movie.title\"\n                    ></v-img>\n\n                    <v-card-title primary-title>\n                        <div>\n                            <h2>{{ item.movie.title }}</h2>\n                            <div>Release Date: {{ item.movie.release_date }}</div>\n                            <div>Type: Movie</div>\n                            <div>Ratings: {{ item.movie.vote_average }}</div>\n                        </div>\n                    </v-card-title>\n\n                    <v-card-actions class=\"justify-center\">\n                        <v-btn text color=\"green\" @click=\"singleMovie(item.movieId)\"\n                            >View</v-btn\n                        >\n                    </v-card-actions>\n                </v-card>\n            </v-flex>\n        </v-layout>\n    </v-container>\n</template>\n\n<script>\nimport {db} from '../firebase';\nexport default {\n    data() {\n        return {\n            gottaWatchList: [],\n            empty: false,\n            loading: true,\n            user: this.$store.state.user.user\n        };\n    },\n\n    mounted: function() {\n        this.fetchGottaWatchList();\n        this.empty = this.gottaWatchList.length === 0;\n    },\n\n    computed: {},\n\n    methods: {\n        singleMovie(id) {\n            this.$router.push('/movie/' + id);\n        },\n\n        posterImage(item) {\n            let baseImgUrl = 'https://image.tmdb.org/t/p/';\n            return baseImgUrl.concat('w154', item.poster_path);\n        },\n\n        async fetchGottaWatchList() {\n            this.gottaWatchList = [];\n            var self = this;\n            // load list from database to local\n            await db\n                .collection('popcornUsers')\n                .doc(this.user.uid)\n                .collection('gottaWatchList')\n                .orderBy('datetime')\n                .get()\n                .then(function(querySnapshot) {\n                    querySnapshot.forEach(function(doc) {\n                        // eslint-disable-next-line no-console\n                        self.gottaWatchList.push(doc.data());\n                    });\n                })\n                .catch(function(error) {\n                    // eslint-disable-next-line no-console\n                    console.log('Error getting documents: ', error);\n                });\n            // eslint-disable-next-line no-console\n            console.log(this.gottaWatchList.get(0));\n            this.loading = false;\n\n        },\n    }\n};\n</script>\n"],"sourceRoot":"src/components"}]}