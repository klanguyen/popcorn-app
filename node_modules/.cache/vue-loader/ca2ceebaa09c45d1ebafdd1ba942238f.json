{"remainingRequest":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/src/components/GottaWatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/src/components/GottaWatch.vue","mtime":1576534749254},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/trinhnguyen/Desktop/popcorn-project/popcorn-app-final/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7ZGJ9IGZyb20gJy4uL2ZpcmViYXNlJzsKZXhwb3J0IGRlZmF1bHQgewogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBnb3R0YVdhdGNoTGlzdDogW10sCiAgICAgICAgICAgIGVtcHR5OiBmYWxzZSwKICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSwKICAgICAgICAgICAgdXNlcjogdGhpcy4kc3RvcmUuc3RhdGUudXNlci51c2VyCiAgICAgICAgfTsKICAgIH0sCgogICAgbW91bnRlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5mZXRjaEdvdHRhV2F0Y2hMaXN0KCk7CiAgICAgICAgdGhpcy5lbXB0eSA9IHRoaXMuZ290dGFXYXRjaExpc3QubGVuZ3RoID09PSAwOwogICAgfSwKCiAgICBjb21wdXRlZDoge30sCgogICAgbWV0aG9kczogewogICAgICAgIHNpbmdsZU1vdmllKGlkKSB7CiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvbW92aWUvJyArIGlkKTsKICAgICAgICB9LAoKICAgICAgICBwb3N0ZXJJbWFnZShpdGVtKSB7CiAgICAgICAgICAgIGxldCBiYXNlSW1nVXJsID0gJ2h0dHBzOi8vaW1hZ2UudG1kYi5vcmcvdC9wLyc7CiAgICAgICAgICAgIHJldHVybiBiYXNlSW1nVXJsLmNvbmNhdCgndzE1NCcsIGl0ZW0ucG9zdGVyX3BhdGgpOwogICAgICAgIH0sCgogICAgICAgIGFzeW5jIGZldGNoR290dGFXYXRjaExpc3QoKSB7CiAgICAgICAgICAgIHRoaXMuZ290dGFXYXRjaExpc3QgPSBbXTsKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICAvLyBsb2FkIGxpc3QgZnJvbSBkYXRhYmFzZSB0byBsb2NhbAogICAgICAgICAgICBhd2FpdCBkYgogICAgICAgICAgICAgICAgLmNvbGxlY3Rpb24oJ3BvcGNvcm5Vc2VycycpCiAgICAgICAgICAgICAgICAuZG9jKHRoaXMudXNlci51aWQpCiAgICAgICAgICAgICAgICAuY29sbGVjdGlvbignZ290dGFXYXRjaExpc3QnKQogICAgICAgICAgICAgICAgLm9yZGVyQnkoJ2RhdGV0aW1lJykKICAgICAgICAgICAgICAgIC5nZXQoKQogICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocXVlcnlTbmFwc2hvdCkgewogICAgICAgICAgICAgICAgICAgIHF1ZXJ5U25hcHNob3QuZm9yRWFjaChmdW5jdGlvbihkb2MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5nb3R0YVdhdGNoTGlzdC5wdXNoKGRvYy5kYXRhKCkpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGdldHRpbmcgZG9jdW1lbnRzOiAnLCBlcnJvcik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5nb3R0YVdhdGNoTGlzdC5nZXQoMCkpOwogICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgfSwKICAgIH0KfTsK"},{"version":3,"sources":["GottaWatch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"GottaWatch.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container v-if=\"loading\">\n        <div class=\"text-xs-center\">\n            <v-progress-circular\n                indeterminate\n                :size=\"150\"\n                :width=\"8\"\n                color=\"green\"\n            >\n            </v-progress-circular>\n        </div>\n    </v-container>\n\n    <v-container v-else-if=\"empty\">\n        <div class=\"text-xs-center\">\n            <h2>No Movie in GottaWatch list</h2>\n        </div>\n    </v-container>\n\n    <v-container v-else grid-list-xl>\n        <v-layout wrap>\n            <v-flex\n                xs4\n                v-for=\"(item, index) in gottaWatchList\"\n                :key=\"index\"\n                mb-2\n            >\n                <v-card>\n                    <v-img\n                        :src=\"posterImage(item.movie)\"\n                        aspect-ratio=\"1\"\n                        :alt=\"item.movie.title\"\n                    ></v-img>\n\n                    <v-card-title primary-title>\n                        <div>\n                            <h2>{{ item.movie.title }}</h2>\n                            <div>Release Date: {{ item.movie.release_date }}</div>\n                            <div>Type: Movie</div>\n                            <div>Ratings: {{ item.movie.vote_average }}</div>\n                        </div>\n                    </v-card-title>\n\n                    <v-card-actions class=\"justify-center\">\n                        <v-btn text color=\"green\" @click=\"singleMovie(item.movieId)\"\n                            >View</v-btn\n                        >\n                    </v-card-actions>\n                </v-card>\n            </v-flex>\n        </v-layout>\n    </v-container>\n</template>\n\n<script>\nimport {db} from '../firebase';\nexport default {\n    data() {\n        return {\n            gottaWatchList: [],\n            empty: false,\n            loading: true,\n            user: this.$store.state.user.user\n        };\n    },\n\n    mounted: function() {\n        this.fetchGottaWatchList();\n        this.empty = this.gottaWatchList.length === 0;\n    },\n\n    computed: {},\n\n    methods: {\n        singleMovie(id) {\n            this.$router.push('/movie/' + id);\n        },\n\n        posterImage(item) {\n            let baseImgUrl = 'https://image.tmdb.org/t/p/';\n            return baseImgUrl.concat('w154', item.poster_path);\n        },\n\n        async fetchGottaWatchList() {\n            this.gottaWatchList = [];\n            var self = this;\n            // load list from database to local\n            await db\n                .collection('popcornUsers')\n                .doc(this.user.uid)\n                .collection('gottaWatchList')\n                .orderBy('datetime')\n                .get()\n                .then(function(querySnapshot) {\n                    querySnapshot.forEach(function(doc) {\n                        // eslint-disable-next-line no-console\n                        self.gottaWatchList.push(doc.data());\n                    });\n                })\n                .catch(function(error) {\n                    // eslint-disable-next-line no-console\n                    console.log('Error getting documents: ', error);\n                });\n            // eslint-disable-next-line no-console\n            console.log(this.gottaWatchList.get(0));\n            this.loading = false;\n\n        },\n    }\n};\n</script>\n"]}]}